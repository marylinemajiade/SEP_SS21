Index: LamaSpielMaven/src/test/java/BenutzerVerwaltenTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport Konto.Benutzer;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\n/**\r\n * @Author Hamza Bariane\r\n */\r\n\r\nclass BenutzerVerwaltenTest {\r\n\r\n    private ArrayList<Benutzer> benutzerListe;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n    }\r\n\r\n    @Test\r\n    void benutzerRegistrieren(String benutzername, String passwort, String email) {\r\n    }\r\n\r\n    @Test\r\n    void benutzerLoeschen(String benutzername) {\r\n    }\r\n\r\n    @Test\r\n    void benutzerdatenPruefen(String benutzername, String passwort) {\r\n    }\r\n\r\n    @Test\r\n    void returnAllPlayer() {\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LamaSpielMaven/src/test/java/BenutzerVerwaltenTest.java b/LamaSpielMaven/src/test/java/BenutzerVerwaltenTest.java
--- a/LamaSpielMaven/src/test/java/BenutzerVerwaltenTest.java	(revision 80d22bd7155205ec9fef60ca8c7b25b92465b47c)
+++ b/LamaSpielMaven/src/test/java/BenutzerVerwaltenTest.java	(date 1623580425777)
@@ -1,5 +1,9 @@
 
 import Konto.Benutzer;
+import Konto.BenutzerVerwalten;
+import fachlicheExceptions.EmailVergebenException;
+import fachlicheExceptions.benutzerNameVergebenException;
+import fachlicheExceptions.ungueltigerBenutzernameException;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -13,25 +17,46 @@
 
 class BenutzerVerwaltenTest {
 
-    private ArrayList<Benutzer> benutzerListe;
+    private BenutzerVerwalten benutzerVerwalten;
 
     @BeforeEach
     void setUp() {
+        System.out.println("Instatiierung der Klasse BenutzerVerwalten");
+        benutzerVerwalten = new BenutzerVerwalten();
     }
+
+    /*@Test (expected = benutzerNameVergebenException.class )
+    void sollBenutzerErstellen() throws EmailVergebenException, benutzerNameVergebenException {
+        benutzerVerwalten.benutzerRegistrieren("x","x","xxx");
+        assertFalse(benutzerVerwalten.returnAllPlayer().isEmpty());
+        assertEquals(1,benutzerVerwalten.returnAllPlayer().size());
+    }*/
 
     @Test
-    void benutzerRegistrieren(String benutzername, String passwort, String email) {
+    void benutzerRegistrieren() throws EmailVergebenException, benutzerNameVergebenException {
+        benutzerVerwalten.benutzerRegistrieren("Samu","samu123","Samu@gmail.com");
+        benutzerVerwalten.benutzerRegistrieren("Laura","Laurita","Laura.schmitt@gmail.com");
+        assertFalse(benutzerVerwalten.returnAllPlayer().isEmpty());
+        assertEquals(2,benutzerVerwalten.returnAllPlayer().size());
     }
 
     @Test
-    void benutzerLoeschen(String benutzername) {
+    void benutzerLoeschen() throws EmailVergebenException, benutzerNameVergebenException, ungueltigerBenutzernameException {
+        benutzerVerwalten.benutzerRegistrieren("Samu","samu123","Samu@gmail.com");
+        benutzerVerwalten.benutzerRegistrieren("Laura","Laurita","Laura.schmitt@gmail.com");
+        benutzerVerwalten.benutzerLoeschen("Samu");
+        assertEquals(1,benutzerVerwalten.returnAllPlayer().size());
+        benutzerVerwalten.benutzerRegistrieren("Samu","samu123","Samu@gmail.com");
+        assertEquals(2,benutzerVerwalten.returnAllPlayer().size());
     }
 
     @Test
-    void benutzerdatenPruefen(String benutzername, String passwort) {
+    void benutzerdatenPruefen() throws EmailVergebenException, benutzerNameVergebenException {
+        benutzerVerwalten.benutzerRegistrieren("Samu","samu123","Samu@gmail.com");
+        benutzerVerwalten.benutzerRegistrieren("Laura","Laurita","Laura.schmitt@gmail.com");
+        assertEquals(2,benutzerVerwalten.returnAllPlayer().size());
+        assertEquals(true,benutzerVerwalten.benutzerdatenPruefen("Samu","samu123"));
+        assertEquals(false,benutzerVerwalten.benutzerdatenPruefen("Laura","Laurita1"));
     }
 
-    @Test
-    void returnAllPlayer() {
-    }
 }
\ No newline at end of file
Index: LamaSpielMaven/src/main/java/Konto/BenutzerVerwalten.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Konto;\r\n\r\nimport java.util.ArrayList;\r\nimport fachlicheExceptions.*;\r\n\r\n/**\r\n * Diese Klasse dient dazu, Benutzerdaten zu verwalten.\r\n * Damit können Benutzerkontos erstellt und gelöscht werden.\r\n *\r\n * @Author Hamza Bariane\r\n */\r\n\r\npublic class BenutzerVerwalten {\r\n\r\n    ArrayList<Benutzer> benutzerListe = new ArrayList<>();\r\n\r\n    /**\r\n     * this methode is used to register a new Player in the game.\r\n     * it saves all the registred player in an Arraylist for easy access.\r\n     * @param benutzername username for the player.\r\n     * @param passwort passwort for the account.\r\n     * @param email email\r\n     */\r\n    void benutzerRegistrieren (String benutzername, String passwort, String email)\r\n            throws benutzerNameVergebenException, EmailVergebenException {\r\n\r\n        Benutzer benutzer = new Benutzer(benutzername, passwort, email);\r\n\r\n        for (Benutzer registeredBenutzer  : benutzerListe) {\r\n            if (registeredBenutzer.getBenutzername().equals(benutzer.getBenutzername())){\r\n                throw new benutzerNameVergebenException();\r\n            } else if(registeredBenutzer.getEmail().equals(benutzer.getEmail())){\r\n                throw new EmailVergebenException();\r\n            } else{\r\n                benutzerListe.add(benutzer);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This methode is used to delete the player account, using just a username (the player is already registered).\r\n     *\r\n     * @param benutzername username for the player.\r\n     */\r\n    void benutzerLoeschen(String benutzername)throws ungueltigerBenutzernameException {\r\n\r\n        for (Benutzer registeredBenutzer: benutzerListe) {\r\n            if(registeredBenutzer.getBenutzername().equals(benutzername)){\r\n                benutzerListe.remove(registeredBenutzer);\r\n            } else {\r\n                throw new ungueltigerBenutzernameException(\"Benutzername existiert nicht\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This methode is used to check the validity of the information given by the Player before the login.\r\n     *\r\n     * @param benutzername username for the player.\r\n     * @param passwort the password to login.\r\n     * @return a boolean, comparing the login-information with the information given during the Registration.\r\n     */\r\n    boolean benutzerdatenPruefen(String benutzername, String passwort){\r\n\r\n        boolean registered=false;\r\n\r\n        for (Benutzer registeredBenutzer: benutzerListe){\r\n            if(registeredBenutzer.getBenutzername().equals(benutzername)\r\n                    && registeredBenutzer.getPasswort().equals(passwort)){\r\n                registered=true;\r\n            } else {registered=false;}\r\n        }\r\n        return registered;\r\n    }\r\n\r\n    /**\r\n     * this methode is just for testing.\r\n     * @return the list of all the Players, who are registered.\r\n     */\r\n\r\n    ArrayList returnAllPlayer (){\r\n        return benutzerListe;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LamaSpielMaven/src/main/java/Konto/BenutzerVerwalten.java b/LamaSpielMaven/src/main/java/Konto/BenutzerVerwalten.java
--- a/LamaSpielMaven/src/main/java/Konto/BenutzerVerwalten.java	(revision 80d22bd7155205ec9fef60ca8c7b25b92465b47c)
+++ b/LamaSpielMaven/src/main/java/Konto/BenutzerVerwalten.java	(date 1623575959427)
@@ -1,6 +1,8 @@
 package Konto;
 
 import java.util.ArrayList;
+import java.util.Collection;
+
 import fachlicheExceptions.*;
 
 /**
@@ -12,7 +14,14 @@
 
 public class BenutzerVerwalten {
 
-    ArrayList<Benutzer> benutzerListe = new ArrayList<>();
+    @Override
+    public String toString() {
+        return "BenutzerVerwalten{" +
+                "benutzerListe=" + benutzerListe +
+                '}';
+    }
+
+    ArrayList<Benutzer> benutzerListe = new ArrayList<Benutzer>();
 
     /**
      * this methode is used to register a new Player in the game.
@@ -21,19 +30,25 @@
      * @param passwort passwort for the account.
      * @param email email
      */
-    void benutzerRegistrieren (String benutzername, String passwort, String email)
+    public void benutzerRegistrieren(String benutzername, String passwort, String email)
             throws benutzerNameVergebenException, EmailVergebenException {
 
         Benutzer benutzer = new Benutzer(benutzername, passwort, email);
+        boolean vergeben= false;
 
         for (Benutzer registeredBenutzer  : benutzerListe) {
             if (registeredBenutzer.getBenutzername().equals(benutzer.getBenutzername())){
+                vergeben = true;
                 throw new benutzerNameVergebenException();
             } else if(registeredBenutzer.getEmail().equals(benutzer.getEmail())){
+                vergeben = true;
                 throw new EmailVergebenException();
             } else{
-                benutzerListe.add(benutzer);
-            }
+                vergeben = false;
+            }
+        }
+        if(vergeben==false){
+            benutzerListe.add(benutzer);
         }
     }
 
@@ -42,7 +57,7 @@
      *
      * @param benutzername username for the player.
      */
-    void benutzerLoeschen(String benutzername)throws ungueltigerBenutzernameException {
+    public void benutzerLoeschen(String benutzername)throws ungueltigerBenutzernameException {
 
         for (Benutzer registeredBenutzer: benutzerListe) {
             if(registeredBenutzer.getBenutzername().equals(benutzername)){
@@ -60,15 +75,16 @@
      * @param passwort the password to login.
      * @return a boolean, comparing the login-information with the information given during the Registration.
      */
-    boolean benutzerdatenPruefen(String benutzername, String passwort){
+    public boolean benutzerdatenPruefen(String benutzername, String passwort){
 
         boolean registered=false;
 
         for (Benutzer registeredBenutzer: benutzerListe){
-            if(registeredBenutzer.getBenutzername().equals(benutzername)
-                    && registeredBenutzer.getPasswort().equals(passwort)){
-                registered=true;
-            } else {registered=false;}
+            if(registeredBenutzer.getBenutzername().equals(benutzername)){
+                if(registeredBenutzer.getPasswort().equals(passwort)){
+                    registered=true;
+                }
+            }
         }
         return registered;
     }
@@ -77,8 +93,8 @@
      * this methode is just for testing.
      * @return the list of all the Players, who are registered.
      */
-
-    ArrayList returnAllPlayer (){
-        return benutzerListe;
+    public ArrayList<Benutzer> returnAllPlayer(){
+        return (benutzerListe) ;
     }
 }
+
